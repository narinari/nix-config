#+title: My Nix Configurations

* Highlights
- [[https://nixos.wiki/wiki/Flakes][Nix Flakes]]
- [[https://github.com/nix-community/home-manager][home-manager]]
- [[https://github.com/gytis-ivaskevicius/flake-utils-plus/][flake-utils-plus]]
- Encrypt secret resources with [[https://github.com/ryantm/agenix][agenix]]
- Multi-platform(Linux & Darwin(MacOS)), Multi-architecture(x86_64 & aarch64)

* Configuration Structure
- =hosts=: NixOS Configurations, accessible via =nixos-rebuild --flake=.
  - =common=: Shared configurations consumed by the machine-specific ones.
    - =global=: Configurations that are globally applied to all my machines.
    - =optional=: Opt-in configurations my machines can use.

** Varibles
- architecture :: "x86_64" | "aarch64"
- platform :: "linux" | "darwin"
- host name :: String
- user name :: String

** Structure
- =flake.nix=: Entrypoint for hosts and home configurations. Also exposes a
  devshell for boostrapping (=nix develop= or =nix-shell=).
- =/common=: Shared configurations consumed by the machine-specific ones.
  - =/<platform>=: Platform-specific
    - =/<architecture>=: CPU Architecture-specific
  - =/users=:
    - =/configuration.nix=: Shared configurations with all users.
    - =/home-manager.nix=: Shared Home-manager configuration, acessible via =home-manager --flake=
    - =/nix-flakes.nix=:
    - =/<user name>=:
      - =/<platform>=:
        - =/home-manager=: My Home-manager configuration, acessible via =home-manager --flake=
      - =/home-manager=:
      - =/configuration.nix=:
- =/hosts=: NixOS Configurations, accessible via =nixos-rebuild --flake=.
  - =/<architecture>-<platform>=:
    - =/<host name>=:
      - =/users=:
        - =/<user name>=:
          - =/home-manager=:
      - =/configuration.nix=:
- =/lib=: A few lib functions for making my flake cleaner
- =/nix=:
- =/overlays=: Patches and version overrides for some packages. Accessible via =nix build=.
  - =/<platform>=: Platform-specific overlays
- =/modules=: A few actual modules (with options) I haven't upstreamed yet.
- =/pkgs=: My custom packages. Also accessible via =nix build=. You can compose
  these into your own configuration by using my flake's overlay, or consume them through NUR.
- =/secrets=: The secret resources are encrypted and stored with the age.
  - secrets.nix: User's public key and specification for encrypted resources.
- =/templates=: A couple project templates for different languages. Accessible
  via =nix init=.

** Hosts
- =aarch64-darwin/FL4N2RD4TD=: MacBook Pro 2021 - 32GB RAM, Apple M1 | MacOS
- =x86_64-linux/khali=: Desktop PC - 32GB RAM, Intel i5, RX 5700XT | XMonad

* Commands
** Setup on machine
#+begin_src shell
# On MacOS machine
nix build .#darwinConfigurations.FL4N2RD4TD.system && darwin-rebuild switch --flake .

# On Linux machine
nix build .#nixosConfigurations.khali.system && nixos-rebuild switch --flake .
#+end_src
*** Nix on Ubuntu

#+begin_src shell
# install nix

# enable flake
mkdir -p ~/.config/nix
echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf
# install home-manager
nix run home-manager/master -- init --switch
#+end_src

** Edit secrets
#+begin_src shell
cd secrets
agenix -e work/env.age
#+end_src

* See
- https://github.com/reckenrode/nixos-configs/
- https://github.com/Misterio77/nix-config/
